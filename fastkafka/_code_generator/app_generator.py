# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/029_App_Generator.ipynb.

# %% auto 0
__all__ = ['logger', 'ENTITY_PROMPT', 'generate_app']

# %% ../../nbs/029_App_Generator.ipynb 1
from typing import *
import time

from yaspin import yaspin

from .._components.logger import get_logger
from .helper import CustomAIChat, ValidateAndFixResponse
from .prompts import APP_GENERATION_PROMPT

# %% ../../nbs/029_App_Generator.ipynb 3
logger = get_logger(__name__)

# %% ../../nbs/029_App_Generator.ipynb 5
ENTITY_PROMPT = """{entities}
{arguments}
"""


def _generate_entities_string(plan: Dict[str, List[Dict[str, Any]]]) -> str:
    entities = "\n".join([entity["name"] for entity in plan["entities"]])
    arguments = "\n".join(
        f"\nLet's now implement the {entity['name']} class with the following arguments:\n"
        + "\n".join(f"Argument: {k}, Type: {v}" for k, v in entity["arguments"].items())
        for entity in plan["entities"]
    )

    return ENTITY_PROMPT.format(entities=entities, arguments=arguments)

# %% ../../nbs/029_App_Generator.ipynb 12
def _generate_apps_prompt(plan: Dict[str, List[Dict[str, Any]]]) -> str:
    apps_prompt = ""
    for app in plan["apps"]:
        apps_prompt += f"""Now, lets create a instance of the FastKafka app with the following fields and assign it to the variable named {app['app_name']}:

kafka_brokers: {app["kafka_brokers"]}
title: {app["title"]}
{_get_functions_prompt(app["produces_functions"], app["app_name"], True)}
{_get_functions_prompt(app["consumes_functions"], app["app_name"])}

"""
    return apps_prompt

# %% ../../nbs/029_App_Generator.ipynb 15
def _generate_app_prompt(validated_description: str, plan: str) -> str:
    plan_dict = json.loads(plan)
    entities_prompt = _generate_entities_string(plan_dict)
    apps_prompt = _generate_apps_prompt(plan_dict)
    generated_plan_prompt = entities_prompt + "\n\n" + apps_prompt
    return APP_GENERATION_PROMPT.format(
        generated_plan_prompt=generated_plan_prompt,
        validated_description=validated_description,
    )

# %% ../../nbs/029_App_Generator.ipynb 17
def _validate_response(response: str) -> str:
    # todo:
    return []

# %% ../../nbs/029_App_Generator.ipynb 18
def generate_app(plan: str, app_description: str) -> Tuple[str, str]:
    """Generate code for the new FastKafka app from the validated plan

    Args:
        plan: The validated application plan generated from the user's application description
        app_description: user's application description
    Returns:
        The generated FastKafka code
    """
    # TODO: Generate code form the plan prompt
    # TODO: Validate the generated code
    with yaspin(
        text="Generating FastKafka app...", color="cyan", spinner="clock"
    ) as sp:
        app_prompt = _generate_app_prompt(app_description, plan)

        app_generator = CustomAIChat(user_prompt=app_prompt)
        app_validator = ValidateAndFixResponse(app_generator, _validate_response)
        validated_app, total_tokens = app_validator.fix(app_description)

        sp.text = ""
        sp.ok(" âœ” FastKafka app generated and saved at: /some_dir/application.py")
        return validated_app, total_tokens
